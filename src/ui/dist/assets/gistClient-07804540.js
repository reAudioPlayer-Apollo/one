import{_ as m,p as _,o as r,c as d,a as e,t as o,b as h,F as b,d as y,bS as f}from"./index-e1e1fd02.js";const w={name:"cloudPlaylist",props:{playlist:Object,localPlaylists:Array,cloudPlaylists:Array},data(){return{statusText:""}},methods:{parseCover:_,import(){this.statusIcon!="cloud_done"&&this.statusIcon=="cloud"&&(this.statusText="creating playlist...",fetch("/api/playlists/new").then(async s=>{this.statusText="updating playlist...";const t=Number(await s.text());await fetch(`/api/playlists/${t}`,{method:"POST",body:JSON.stringify({name:this.playlist.name,description:this.playlist.description})});for(let i=0;i<this.playlist.songs.length;i++){const a=this.playlist.songs[i];this.statusText=`adding song ${i} / ${this.playlist.songs.length-1}...`,await fetch(`/api/playlists/${t}/tracks`,{method:"POST",body:JSON.stringify({source:a.source,title:a.title,artist:a.artist,album:a.album,cover:a.cover,favourite:a.favourite,duration:a.duration})})}this.statusText=""}))}},computed:{cover(){var s,t;return this.playlist.cover||((t=(s=this.playlist.songs)==null?void 0:s[0])==null?void 0:t.cover)||"/assets/img/music_placeholder.png"},statusIcon(){if(this.statusText)return"cloud_sync";const s=this.localPlaylists||this.cloudPlaylists;return s.filter(t=>JSON.stringify(t)==JSON.stringify(this.playlist)).length?"cloud_done":s.filter(t=>t.name==this.playlist.name).length?"cloud_sync":this.localPlaylists?"cloud":"cloud_off"}}},v={class:"cloudPlaylist"},P=["src"],T={class:"data"},x={class:"lead"},N={class:"status"},S={class:"material-symbols-rounded"},O={key:0,class:"lead"};function C(s,t,i,a,n,c){return r(),d("div",v,[e("span",{onClick:t[0]||(t[0]=()=>s.$emit("remove")),class:"close material-symbols-rounded"},"close"),e("img",{src:c.parseCover(c.cover)},null,8,P),e("div",T,[e("h2",null,o(i.playlist.name),1),e("div",x,[h(o(i.playlist.songs.length)+" "+o(i.playlist.songs.length==1?"song":"songs"),1),i.playlist.description?(r(),d(b,{key:0},[h(" â€¢ "),e("i",null,o(i.playlist.description),1)],64)):y("",!0)]),e("div",N,[e("span",S,o(c.statusIcon),1),n.statusText?(r(),d("div",O,[e("i",null,o(n.statusText),1)])):y("",!0)])])])}const I=m(w,[["render",C],["__scopeId","data-v-6c556814"]]),l=async()=>{const t=(await f()).github.githubPat;if(!t)throw new Error("No GitHub PAT found");return{Authorization:"Bearer "+t}},g=(s,t="one.lib.json")=>{const i={};return i[t]={content:JSON.stringify(s)},JSON.stringify({files:i})},u=async()=>(await f()).github.gistId,p=async()=>{const s=await l();return await(await fetch(`https://api.github.com/gists/${await u()}`,{headers:s})).json()},J={get:p,getContent:async(s="one.lib.json")=>{const t=await p();return JSON.parse(t.files[s].content)},update:async(s,t="one.lib.json")=>{const i=await l();return await(await fetch(`https://api.github.com/gists/${await u()}`,{method:"PATCH",headers:i,body:g(s,t)})).json()},save:async(s,t="one.lib.json")=>{const i=await l(),n=await(await fetch("https://api.github.com/gists",{method:"POST",headers:i,body:g(s,t)})).json();n.id&&await fetch("/api/config",{method:"PUT",body:JSON.stringify({github:{gistId:n.id}})})},delete:async()=>{const s=await l();return await(await fetch(`https://api.github.com/gists/${await u()}`,{method:"DELETE",headers:s})).json()}};export{I as C,J as G};
