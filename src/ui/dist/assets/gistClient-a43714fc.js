import{_,h as b,p as w,e as v,o as c,c as r,a as i,g as P,t as o,b as h,F as T,d as y,bS as f}from"./index-bcfdc045.js";const C={name:"cloudPlaylist",components:{Cover:b},props:{playlist:Object,localPlaylists:Array,cloudPlaylists:Array},data(){return{statusText:""}},methods:{parseCover:w,import(){this.statusIcon!="cloud_done"&&this.statusIcon=="cloud"&&(this.statusText="creating playlist...",fetch("/api/playlists/new").then(async s=>{this.statusText="updating playlist...";const t=Number(await s.text());await fetch(`/api/playlists/${t}`,{method:"POST",body:JSON.stringify({name:this.playlist.name,description:this.playlist.description})});for(let e=0;e<this.playlist.songs.length;e++){const a=this.playlist.songs[e];this.statusText=`adding song ${e} / ${this.playlist.songs.length-1}...`,await fetch(`/api/playlists/${t}/tracks`,{method:"POST",body:JSON.stringify({source:a.source,title:a.title,artist:a.artist,album:a.album,cover:a.cover,favourite:a.favourite,duration:a.duration})})}this.statusText=""}))}},computed:{cover(){var s,t;return this.playlist.cover||((t=(s=this.playlist.songs)==null?void 0:s[0])==null?void 0:t.cover)||"/assets/img/music_placeholder.png"},statusIcon(){if(this.statusText)return"cloud_sync";const s=this.localPlaylists||this.cloudPlaylists;return s.filter(t=>JSON.stringify(t)==JSON.stringify(this.playlist)).length?"cloud_done":s.filter(t=>t.name==this.playlist.name).length?"cloud_sync":this.localPlaylists?"cloud":"cloud_off"}}},N={class:"cloudPlaylist"},x={class:"data"},S={class:"lead"},O={class:"status"},j={class:"material-symbols-rounded"},I={key:0,class:"lead"};function J(s,t,e,a,n,u){const m=v("Cover");return c(),r("div",N,[i("span",{class:"close material-symbols-rounded",onClick:t[0]||(t[0]=()=>s.$emit("remove"))},"close"),P(m,{src:u.cover},null,8,["src"]),i("div",x,[i("h2",null,o(e.playlist.name),1),i("div",S,[h(o(e.playlist.songs.length)+" "+o(e.playlist.songs.length==1?"song":"songs"),1),e.playlist.description?(c(),r(T,{key:0},[h(" â€¢ "),i("i",null,o(e.playlist.description),1)],64)):y("",!0)]),i("div",O,[i("span",j,o(u.statusIcon),1),n.statusText?(c(),r("div",I,[i("i",null,o(n.statusText),1)])):y("",!0)])])])}const A=_(C,[["render",J],["__scopeId","data-v-bae2d183"]]),l=async()=>{const t=(await f()).github.githubPat;if(!t)throw new Error("No GitHub PAT found");return{Authorization:"Bearer "+t}},g=(s,t="one.lib.json")=>{const e={};return e[t]={content:JSON.stringify(s)},JSON.stringify({files:e})},d=async()=>(await f()).github.gistId,p=async()=>{const s=await l();return await(await fetch(`https://api.github.com/gists/${await d()}`,{headers:s})).json()},E={get:p,getContent:async(s="one.lib.json")=>{const t=await p();return JSON.parse(t.files[s].content)},update:async(s,t="one.lib.json")=>{const e=await l();return await(await fetch(`https://api.github.com/gists/${await d()}`,{method:"PATCH",headers:e,body:g(s,t)})).json()},save:async(s,t="one.lib.json")=>{const e=await l(),n=await(await fetch("https://api.github.com/gists",{method:"POST",headers:e,body:g(s,t)})).json();n.id&&await fetch("/api/config",{method:"PUT",body:JSON.stringify({github:{gistId:n.id}})})},delete:async()=>{const s=await l();return await(await fetch(`https://api.github.com/gists/${await d()}`,{method:"DELETE",headers:s})).json()}};export{A as C,E as G};
