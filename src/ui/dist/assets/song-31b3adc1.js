import{j as o,bF as n,x as r,c0 as y}from"./index-01636ea9.js";const i=o(),l=async t=>{await fetch(`/api/playlists/${t.id}`,{method:"POST",body:JSON.stringify({name:t.name,description:t.description,cover:t.cover})}),await i.fetchPlaylists()},d=async t=>{const a=await fetch(`/api/playlists/${t}`);if(a.status===404)return null;const e=await a.json();for(const s of e.songs)s.href=`/track/${r(s.id)}`;return e.id=t,e},u=async t=>await d(n(t)),m=async t=>{await fetch(`/api/playlists/${t}`,{method:"DELETE"}),await i.fetchPlaylists()},c=async()=>{const a=await(await fetch("/api/playlists/new")).json();return await i.fetchPlaylists(),a},p=async(t,a="",e="")=>{const s=await c();return await l({id:s,name:t,description:a,cover:e}),s},S=async(t,a)=>{await fetch(`/api/playlists/${t}/tracks`,{method:"DELETE",body:JSON.stringify({songId:a})}),await i.fetchPlaylists()},g=async t=>{await fetch(`/api/tracks/${t.id}`,{method:"PUT",body:JSON.stringify({source:t.source,title:t.title,artist:t.artist,album:t.album,cover:t.cover})})},P=async t=>await(await fetch("/api/browse/track",{method:"POST",body:JSON.stringify({url:t})})).json(),b=async(t,a)=>{t==="new"&&(t=await c()),typeof t=="string"&&console.error("playlistId cannot be a string",t),await fetch(`/api/playlists/${t}/tracks`,{method:"POST",body:JSON.stringify({source:a.source,title:a.title,artist:a.artist,album:a.album,cover:a.cover})})},k=async(t,a=!0)=>{await fetch(`/api/tracks/${t}`,{method:"PUT",body:JSON.stringify({favourite:a})})},O=async t=>{window.open(`/api/tracks/${t}/download`)},f=async t=>await(await fetch(`/api/tracks/${t}`)).json(),$=async t=>{const a=y(t);return await f(a)},T=async(t,a=!1,e=null)=>{const s={id:t};return a&&(s.forceFetch=!0),e&&(s.spotifyId=e),await(await fetch("/api/spotify/meta",{method:"POST",body:JSON.stringify(s)})).json()},j=async t=>await(await fetch(`/api/spotify/recommendations/${t}`)).json();export{b as a,c as b,p as c,m as d,u as e,P as f,d as g,$ as h,T as i,j,O as k,k as l,g as m,S as r,l as u};
